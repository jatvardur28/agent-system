import json
import logging
import asyncio
from typing import Dict, Any

from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import SystemMessage, HumanMessage

from llm_integrations import LLMIntegration
from search_tool import ALL_TOOLS # –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ web_search)
import database

logger = logging.getLogger(__name__)

llm_integration = LLMIntegration()

class TelegramCallbackHandler:
    """
    –ö–æ–ª–ª–±—ç–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è LangChain, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∞–≥–µ–Ω—Ç–∞ –≤ Telegram.
    """
    def __init__(self, chat_id: int, send_message_callback):
        self.chat_id = chat_id
        self.send_message_callback = send_message_callback

    async def on_agent_action(self, action: Any, **kwargs: Any) -> Any:
        await self.send_message_callback(self.chat_id, f"‚û°Ô∏è _{action.log}_", parse_mode='Markdown')

    async def on_tool_start(self, serialized: Dict[str, Any], input_str: str, **kwargs: Any) -> Any:
        tool_name = serialized.get("name", "Unknown Tool")
        await self.send_message_callback(self.chat_id, f"üõ†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç* `{tool_name}`: `{input_str}`", parse_mode='Markdown')

    async def on_tool_end(self, output: str, **kwargs: Any) -> Any:
        # –û–±—Ä–µ–∑–∞–µ–º –≤—ã–≤–æ–¥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        truncated_output = (output[:500] + '...') if len(output) > 500 else output
        await self.send_message_callback(self.chat_id, f"‚úÖ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.* –†–µ–∑—É–ª—å—Ç–∞—Ç (–æ–±—Ä–µ–∑–∞–Ω–æ): `{truncated_output}`", parse_mode='Markdown')

    async def on_agent_finish(self, finish: Any, **kwargs: Any) -> Any:
        pass # –≠—Ç–æ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–∞, –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –¢–ì


async def create_agent_from_config(agent_id: str, telegram_callback_handler: TelegramCallbackHandler = None):
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ (LLM Chain –∏–ª–∏ AgentExecutor) –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î.
    """
    config = database.get_agent_config(agent_id)
    if not config:
        logger.error(f"Agent configuration for '{agent_id}' not found.")
        return None

    # –°–æ–∑–¥–∞–µ–º LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    # –î–ª—è –ê–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4 (–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å OpenRouter) –∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç AgentExecutor'–∞–º–∏,
    # –º—ã –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (web_search) –∫ –∏—Ö LLM.
    llm = llm_integration.get_llm(
        provider=config['llm_provider'],
        model_name=config['llm_model'],
        agent_id=config['id'] if config['llm_provider'] == 'hyperbolic' else None, # –ü–µ—Ä–µ–¥–∞–µ–º agent_id —Ç–æ–ª—å–∫–æ –¥–ª—è Hyperbolic
        bind_tools=(agent_id in ["agent3_hyper2", "agent4_hyper3"]) # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫ LLM –ê–≥–µ–Ω—Ç–æ–≤ 3 –∏ 4
    )

    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", config['system_prompt']),
            MessagesPlaceholder("chat_history", optional=True), # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
            ("human", "{input}"),
            MessagesPlaceholder("agent_scratchpad"), # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º—ã—Å–ª–µ–π –∞–≥–µ–Ω—Ç–∞ –≤ AgentExecutor
        ]
    )
    
    # –ê–≥–µ–Ω—Ç—ã 3 –∏ 4 —Ç–µ–ø–µ—Ä—å —è–≤–ª—è—é—Ç—Å—è AgentExecutor'–∞–º–∏, —Ç.–∫. –∏—Ö LLM (OpenRouter) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç tool_calling.
    if agent_id in ["agent3_hyper2", "agent4_hyper3"]:
        # –°–æ–∑–¥–∞–µ–º AgentExecutor, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        agent = create_tool_calling_agent(llm, ALL_TOOLS, prompt)
        executor = AgentExecutor(
            agent=agent,
            tools=ALL_TOOLS, # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            verbose=True, # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
            handle_parsing_errors=True,
            callbacks=[telegram_callback_handler] if telegram_callback_handler else None
        )
        return executor
    else:
        # –î–ª—è –∞–≥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LangChain AgentExecutor
        # (–ê–≥–µ–Ω—Ç 1, –ê–≥–µ–Ω—Ç 2, –ê–≥–µ–Ω—Ç 6)
        # –ê —Ç–∞–∫–∂–µ –¥–ª—è –ê–≥–µ–Ω—Ç–∞ 5, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ LLM, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –∫–∞–∫ –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞.
        class SimpleChainWrapper:
            def __init__(self, llm_instance, system_prompt):
                self.llm_instance = llm_instance
                self.system_prompt = system_prompt
            
            async def ainvoke(self, input_data: Dict[str, Any]):
                user_message = input_data.get('input', '')
                messages = [SystemMessage(content=self.system_prompt), HumanMessage(content=user_message)]

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π HyperbolicLLM, —É –Ω–µ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ generate
                if hasattr(self.llm_instance, 'generate'):
                    response_content = await self.llm_instance.generate(
                        [{"role": "system", "content": self.system_prompt}, {"role": "user", "content": user_message}]
                    )
                    return {"output": response_content}
                # –ò–Ω–∞—á–µ, —ç—Ç–æ LangChain ChatOpenAI LLM
                else:
                    response = await self.llm_instance.ainvoke(messages)
                    return {"output": response.content} # LangChain ChatModel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Content (str)

        return SimpleChainWrapper(llm, config['system_prompt'])


async def run_full_agent_process(user_query: str, chat_id: int, send_message_callback):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤: –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    """
    telegram_callback_handler = TelegramCallbackHandler(chat_id, send_message_callback)

    await send_message_callback(chat_id, "üöÄ **–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞...**\n\n", parse_mode='Markdown')

    # --- –®–∞–≥ 1: –ê–≥–µ–Ω—Ç ‚Ññ1 (–ü—Ä–æ–º–ø—Ç-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä) ---
    await send_message_callback(chat_id, "ü§ñ **–ê–≥–µ–Ω—Ç #1 (–ü—Ä–æ–º–ø—Ç-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä)**: –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", parse_mode='Markdown')
    agent1 = await create_agent_from_config("agent1_hyper0", telegram_callback_handler)
    if not agent1:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #1 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    try:
        a1_result = await agent1.ainvoke({"input": user_query})
        refined_query = a1_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        await send_message_callback(chat_id, f"üìù **–ê–≥–µ–Ω—Ç #1 –∑–∞–≤–µ—Ä—à–∏–ª.** –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:\n```\n{refined_query}\n```", parse_mode='Markdown')
    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #1:** {e}")
        logger.exception("Agent 1 failed.")
        return

    # --- –®–∞–≥ 2: –ê–≥–µ–Ω—Ç ‚Ññ2 (–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä) ---
    await send_message_callback(chat_id, "\nü§ñ **–ê–≥–µ–Ω—Ç #2 (–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)**: –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π...", parse_mode='Markdown')
    agent2 = await create_agent_from_config("agent2_hyper1", telegram_callback_handler)
    if not agent2:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #2 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    
    try:
        a2_result = await agent2.ainvoke({"input": refined_query})
        orchestration_plan_raw = a2_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏.")
        
        try:
            orchestration_plan = json.loads(orchestration_plan_raw)
            agent3_task = orchestration_plan.get('agent3_task')
            agent4_task = orchestration_plan.get('agent4_task')

            if not agent3_task or not agent4_task:
                raise ValueError("Parsed plan is missing 'agent3_task' or 'agent4_task'. Check Agent #2's output format.")

            await send_message_callback(chat_id, f"üìã **–ê–≥–µ–Ω—Ç #2 –∑–∞–≤–µ—Ä—à–∏–ª.** –ü–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ê–≥–µ–Ω—Ç–æ–≤ #3 –∏ #4.", parse_mode='Markdown')
            logger.info(f"Agent 2 output plan: {orchestration_plan}")

        except json.JSONDecodeError as e:
            await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–ª–∞–Ω–∞ –ê–≥–µ–Ω—Ç–∞ #2:** –û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. {e}\nRaw output: ```{orchestration_plan_raw}```", parse_mode='Markdown')
            logger.error(f"Agent 2 JSON parsing error: {e}, Raw output: {orchestration_plan_raw}")
            return
        except ValueError as e:
            await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ –ê–≥–µ–Ω—Ç–∞ #2:** {e}", parse_mode='Markdown')
            logger.error(f"Agent 2 plan structure error: {e}")
            return

    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #2:** {e}", parse_mode='Markdown')
        logger.exception("Agent 2 failed.")
        return

    # --- –®–∞–≥ 3 & 4: –ê–≥–µ–Ω—Ç—ã ‚Ññ3 –∏ ‚Ññ4 (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏) –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å ---
    await send_message_callback(chat_id, "\nüîÑ **–ê–≥–µ–Ω—Ç—ã #3 –∏ #4 (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏)**: –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...", parse_mode='Markdown')

    agent3_executor = await create_agent_from_config("agent3_hyper2", telegram_callback_handler)
    agent4_executor = await create_agent_from_config("agent4_hyper3", telegram_callback_handler)

    if not agent3_executor or not agent4_executor:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    async def run_research_agent(executor, task_config, agent_label):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π."""
        await send_message_callback(chat_id, f"üîç **{agent_label}** –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...", parse_mode='Markdown')
        try:
            # –î–ª—è AgentExecutor, –º—ã –º–æ–∂–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –≤ database.py —è–≤–ª—è–µ—Ç—Å—è —à–∞–±–ª–æ–Ω–æ–º)
            dynamic_prompt_messages = [
                SystemMessage(content=task_config['system_prompt']),
                MessagesPlaceholder("chat_history", optional=True),
                HumanMessage(content="{input}"),
                MessagesPlaceholder("agent_scratchpad"),
            ]
            executor.agent.prompt = ChatPromptTemplate.from_messages(dynamic_prompt_messages)
            
            result = await executor.ainvoke({"input": task_config['instructional_query']})
            await send_message_callback(chat_id, f"‚úÖ **{agent_label} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.**", parse_mode='Markdown')
            return result.get('output', f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {agent_label}.")
        except Exception as e:
            await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ {agent_label}:** {e}", parse_mode='Markdown')
            logger.exception(f"{agent_label} failed.")
            return f"Error: {e}"

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å
    try:
        results = await asyncio.gather(
            run_research_agent(agent3_executor, agent3_task, "–ê–≥–µ–Ω—Ç #3"),
            run_research_agent(agent4_executor, agent4_task, "–ê–≥–µ–Ω—Ç #4"),
            return_exceptions=True # –ß—Ç–æ–±—ã –Ω–µ —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É
        )
        agent3_res, agent4_res = results

        if isinstance(agent3_res, Exception):
            await send_message_callback(chat_id, f"‚ùå **–ê–≥–µ–Ω—Ç #3 –ø–æ—Ç–µ—Ä–ø–µ–ª —Å–±–æ–π:** {agent3_res}", parse_mode='Markdown')
            agent3_res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ê–≥–µ–Ω—Ç–∞ #3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."
        if isinstance(agent4_res, Exception):
            await send_message_callback(chat_id, f"‚ùå **–ê–≥–µ–Ω—Ç #4 –ø–æ—Ç–µ—Ä–ø–µ–ª —Å–±–æ–π:** {agent4_res}", parse_mode='Markdown')
            agent4_res = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ê–≥–µ–Ω—Ç–∞ #4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏."

    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ê–≥–µ–Ω—Ç–æ–≤ #3/#4:** {e}", parse_mode='Markdown')
        logger.exception("Parallel execution of Agents 3/4 failed.")
        return

    # --- –®–∞–≥ 6: –ê–≥–µ–Ω—Ç ‚Ññ6 (–§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫) ---
    await send_message_callback(chat_id, "\nüß† **–ê–≥–µ–Ω—Ç #6 (–§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫)**: –û–±—ä–µ–¥–∏–Ω—è—é –∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...", parse_mode='Markdown')
    agent6 = await create_agent_from_config("agent6_nous0", telegram_callback_handler)
    if not agent6:
        await send_message_callback(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç #6 –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    final_analysis_input = (
        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–∞ #3:\n{agent3_res}\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –ê–≥–µ–Ω—Ç–∞ #4:\n{agent4_res}\n\n"
        "–û–±—ä–µ–¥–∏–Ω–∏ –∏ —Å–∏–Ω—Ç–µ–∑–∏—Ä—É–π —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –æ—Ç—á–µ—Ç."
    )

    try:
        a6_result = await agent6.ainvoke({"input": final_analysis_input})
        final_report = a6_result.get('output', "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.")
        await send_message_callback(chat_id, "‚úÖ **–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**", parse_mode='Markdown')
        await send_message_callback(chat_id, final_report, parse_mode='Markdown')
    except Exception as e:
        await send_message_callback(chat_id, f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ê–≥–µ–Ω—Ç–∞ #6:** {e}", parse_mode='Markdown')
        logger.exception("Agent 6 failed.")
        return

    await send_message_callback(chat_id, "\n‚ú® **–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**", parse_mode='Markdown')
